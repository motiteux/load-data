function [G, x, b, M] = snow_gis_reduce(SNOW_GIS_DIR, downsample, ...
    neighbors, neighbors_full)
%SNOW_GIS_REDUCE enforces the graph generated by SNOW_GIS() to consist of
%only the cholera and pump nodes, discarding the road nodes. The distances
%between nodes are adapted to this new setting.
%
%   Usage:
%       [G, x, b, M] = snow_gis_reduce(SNOW_GIS_DIR, downsample, ...
%           neighbors, neighbors_full)
%
%   Input:
%       SNOW_GIS_DIR    : A string specifying the directory where the GIS
%                       dataset is located (see reference below).
%                       (DEFAULT: '~/data/snow_gis/');
%       downsample      : (Optional) A power of 2 (greater or equal to 1). 
%                         Factor by which we downsample the points in the
%                         road.
%                         (DEFAULT: 1)
%       neighbors       : (Optional) Number of neighbors of each node in 
%                         the reduced graph.
%                         (DEFAULT: 20)
%       neighbors_full  : (Optional) Number of neighbors of each node in 
%                         the full graph.
%                         (DEFAULT: 6)
%   Output:
%       G   : A Matlab structure encoding graph information.
%       x   : A vector with non-zero entry at the location of the infected
%             water pump.
%       b   : A vector with whose entries represent the observed death
%             count by cholera at each point.
%       M   : A vector encoding the observation mask (nodes where 
%             the deaths were observed)
%
%   Example:
%       G = snow_gis_reduce(SNOW_GIS_DIR);
%
%   See also: snow_gis.m
%
%   Requires: GSPBox (https://lts2.epfl.ch/gsp/)
%             MatlabBGL (http://dgleich.github.io/matlab-bgl/)
%
%   Reference: http://blog.rtwilson.com/john-snows-famous-cholera-analysis-data-in-modern-gis-formats/
%
% Author: Rodrigo Pena (rodrigo.pena@epfl.ch)
% Date: 15 Feb 2016

%% Parse input
if nargin < 1 || isempty(SNOW_GIS_DIR)
    SNOW_GIS_DIR = '~/data/snow_gis/';
end
assert(isa(SNOW_GIS_DIR, 'char'), 'SNOW_GIS_DIR must be a string');

if nargin < 2 || isempty(downsample); downsample = 1; end

if nargin < 3 || isempty(neighbors); neighbors = 20; end
assert((neighbors >= 2), 'neighbors must be greater or equal to 2');

if nargin < 4 || isempty(neighbors_full); neighbors_full = 6; end
assert((neighbors >= 2), 'neighbors_full must be greater or equal to 2');

%% Get full Snow GIS graph
[G_full, x_full, b_full] = snow_gis(SNOW_GIS_DIR, downsample, neighbors_full);

%% Initialization
idx_non_road = [G_full.idx_cholera, G_full.idx_pump];
N_red = length(idx_non_road);
Dist_red = sparse(zeros(G_full.N, N_red));

%% Compute shortest path distances
for i = 1:N_red
    Dist_red(:, i) = shortest_paths(G_full.Dist, idx_non_road(i));
end

% Keep only the distances to non-road nodes
Dist_red = Dist_red(idx_non_road, :);

% Keep distance information only for the nearest neighbors
[dist, spi] = sort(Dist_red, 1, 'ascend');
dist = dist(1:min(neighbors + 1, N_red), :);
spi = spi(1:min(neighbors + 1, N_red), :);
spj = repmat(1:N_red, [size(spi, 1), 1]);
dist = dist(:);
spi = spi(:);
spj = spj(:);

%% Compute new weight matrix
%TODO: check if graph generated by Vassilis' graph learning code works
% W = gsp_learn_graph_log_degrees(Dist_red.^2, 1, 1, struct('verbosity', 1, 'maxit', 5000));
% W = gsp_learn_graph_log_degrees(Dist_red.^2, 10, 1, struct('verbosity', 1, 'maxit', 5000));
% W = sparse(W);

sigma = mean(dist.^2);
W = sparse(spi, spj, double(exp(-dist.^2/sigma)), N_red, N_red);
W(1:(N_red + 1):end) = 0;  % Remove values in the main diagonal
W = gsp_symmetrize(W, 'average');

%% Create Graph structure
G = struct( 'N', N_red, ...
                'W', W, ...
                'coords', G_full.coords(idx_non_road, :), ...
                'type', 'nearest neighbors');

%% Retain only the main connected component
[G_cell, node_cell] = connected_subgraphs(G);
G = G_cell{1};
nodes = node_cell{1};

%% Update Graph structure
G.sigma = sigma;
G.Dist = Dist_red(nodes, nodes);
G.idx_cholera = nodes(nodes <= length(G_full.idx_cholera));
G.idx_cholera = 1:length(G_full.idx_cholera);
G.idx_pump = nodes(nodes > length(G_full.idx_cholera));
G.idx_pump = (length(G_full.idx_cholera) + 1):G.N;
G.data_source = 'snow_gis';
G = gsp_graph_default_parameters(G);

%% Update signals
% Infected pump
x = x_full(idx_non_road);
x = x(nodes);

% Observed death count
b = b_full(idx_non_road);
b = b(nodes);

% Observation mask
M = double(b ~= 0);

end